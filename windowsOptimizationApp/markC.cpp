#include "markC.h"
#include "RegistryManager.h"
#include <string>
#include <vector>
#include <Windows.h>

// Static variable for yData
static const std::vector<BYTE> yData = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Apply MarkC mouse fix with the given xData and yData
void applyMarkC(const std::vector<BYTE>& xData, const std::vector<BYTE>& yData);

// Windows_10+8.x_MouseFix_ItemsSize=100%_Scale=1-to-1_@6-of-11
void MouseScaleFix::setScale100()
{

    // Curve data
    const std::vector<BYTE> xData = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xCC,
        0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x99, 0x19, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x66, 0x26, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // Apply the mouse fix
    applyMarkC(xData, yData);

    std::cout << "The mouse fix was set (scale 100)" << std::endl;
}

// Windows_10+8.x_MouseFix_ItemsSize=125%_Scale=1-to-1_@6-of-11
void MouseScaleFix::setScale125()
{

    // Curve data
    const std::vector<BYTE> xData = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // Apply the mouse fix
    applyMarkC(xData, yData);

    std::cout << "The mouse fix was set (scale 125)" << std::endl;
}

// Windows_10+8.x_MouseFix_ItemsSize=150%_Scale=1-to-1_@6-of-11
void MouseScaleFix::setScale150()
{

    // Curve data
    const std::vector<BYTE> xData = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x33,
        0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x66, 0x26, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x90, 0x99, 0x39, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xC0, 0xCC, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // Apply the mouse fix
    applyMarkC(xData, yData);

    std::cout << "The mouse fix was set (scale 150)" << std::endl;
}

// Windows_10+8.x_MouseFix_ItemsSize=175%_Scale=1-to-1_@6-of-11
void MouseScaleFix::setScale175()
{

    // Curve data
    const std::vector<BYTE> xData = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x66,
        0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xCC, 0x2C, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x20, 0x33, 0x43, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x80, 0x99, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // Apply the mouse fix
    applyMarkC(xData, yData);

    std::cout << "The mouse fix was set (scale 175)" << std::endl;
}

// Windows_10+8.x_MouseFix_ItemsSize=200%_Scale=1-to-1_@6-of-11
void MouseScaleFix::setScale200()
{

    // Curve data
    const std::vector<BYTE> xData = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x99,
        0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x33, 0x33, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xB0, 0xCC, 0x4C, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x40, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // Apply the mouse fix
    applyMarkC(xData, yData);

    std::cout << "The mouse fix was set (scale 200)" << std::endl;
}

// Windows_10+8.x_MouseFix_ItemsSize=225%_Scale=1-to-1_@6-of-11
void MouseScaleFix::setScale225()
{

    // Curve data
    const std::vector<BYTE> xData = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xCC,
        0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x99, 0x39, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x66, 0x56, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x33, 0xB3, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // Apply the mouse fix
    applyMarkC(xData, yData);

    std::cout << "The mouse fix was set (scale 225)" << std::endl;
}

// Windows_10+8.x_MouseFix_ItemsSize=250%_Scale=1-to-1_@6-of-11
void MouseScaleFix::setScale250()
{

    // Curve data
    const std::vector<BYTE> xData = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // Apply the mouse fix
    applyMarkC(xData, yData);

    std::cout << "The mouse fix was set (scale 200)" << std::endl;
}

// Windows_10+8.x_MouseFix_ItemsSize=300%_Scale=1-to-1_@6-of-11
void MouseScaleFix::setScale300()
{

    // Curve data
    const std::vector<BYTE> xData = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xCC,
        0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x99, 0x39, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x66, 0x56, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x33, 0xB3, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // Apply the mouse fix
    applyMarkC(xData, yData);

    std::cout << "The mouse fix was set (scale 225)" << std::endl;
}

// Windows_10+8.x_MouseFix_ItemsSize=350%_Scale=1-to-1_@6-of-11
void MouseScaleFix::setScale350()
{

    // Curve data
    const std::vector<BYTE> xData = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xCC,
        0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x99, 0x59, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x40, 0x66, 0x86, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x33, 0xB3, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    // Apply the mouse fix
    applyMarkC(xData, yData);

    std::cout << "The mouse fix was set (scale 350)" << std::endl;
}

// Set scale back to the default values
void MouseScaleFix::setScaleDefault()
{

    // Curve data
    const std::vector<BYTE> xData = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x6e,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x29, 0xdc, 0x03, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00
    };

    const std::vector<BYTE> yData = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x11,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x04, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x12, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xc0, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x00
    };

    // Apply the mouse fix
    applyMarkC(xData, yData);

    std::cout << "The mouse fix was set to Default" << std::endl;
}

void MouseScaleFix::applyMarkC(const std::vector<BYTE>& xData,
    const std::vector<BYTE>& yData)
{

    // [HKEY_CURRENT_USER\Control Panel\Mouse]
    // Make sure key is created and accessible.
    RegistryManager regManager;
    regManager.createKey("Control Panel\\Mouse");

    // Set values
    regManager.createVec("Control Panel\\Mouse", xData, "SmoothMouseXCurve");
    regManager.createVec("Control Panel\\Mouse", yData, "SmoothMouseYCurve");
    regManager.createVal("Control Panel\\Mouse", "10",
        "MouseSensitivity");

    RegistryManager regManagerUsers(HKEY_USERS); // Use HKEY_USERS

    // [HKEY_USERS\.DEFAULT\Control Panel\Mouse]
    // Make sure key is created and accessible.
    regManagerUsers.createKey(".DEFAULT\\Control Panel\\Mouse");

    // Set values
    regManagerUsers.createVal(".DEFAULT\\Control Panel\\Mouse", "10",
        "MouseSpeed");
    regManagerUsers.createVal(".DEFAULT\\Control Panel\\Mouse", "10",
        "MouseThreshold1");
    regManagerUsers.createVal(".DEFAULT\\Control Panel\\Mouse", "10",
        "MouseThreshold2");
}

void MouseScaleFix::applyMouseFix()
{
    switch (scale) {
    case Scale::Scale100:
        setScale100();
        break;
    case Scale::Scale125:
        setScale125();
        break;
    case Scale::Scale150:
        setScale150();
        break;
    case Scale::Scale175:
        setScale175();
        break;
    case Scale::Scale200:
        setScale200();
        break;
    case Scale::Scale225:
        setScale225();
        break;
    case Scale::Scale250:
        setScale250();
        break;
    case Scale::Scale300:
        setScale300();
        break;
    case Scale::Scale350:
        setScale350();
        break;
    case Scale::Default:
        setScale350();
        break;
    }
}
